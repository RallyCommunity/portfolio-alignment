<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Alignment</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri May 22 2015 14:15:50 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri May 22 2015 14:15:50 GMT-0700 (PDT)";
        var CHECKSUM = 87543690950;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",

     renderTpl: '<div class="tscenter"><div class="tsinfo">Data current as of {date}&nbsp;&nbsp;&nbsp;</div><div id="{id}-infolinkWrap" class="tsinfolink">&nbsp;i&nbsp;</div></div>',

    initComponent: function() {
        this.callParent(arguments);
    },
    
    onRender: function() {
        this.callParent(arguments);

        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This unsupported app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.preferences.Allocation',{
    logger: new Rally.technicalservices.Logger(),
    noneText: 'None',
    allocationsByRelease: null,
    project: null,
    /**
     *  {
     *      releaseKey1:  {
     *          A:
     *          B:
     *          C:
     *          D:
     *      }
     *      releaseKey2: {}
     *  }
     *
     */
    constructor: function(config){
        this.allocationsByRelease = {};
        Ext.apply(this,config);

    },
    getAllocationHash: function(release){

        return this.allocationsByRelease[this.getReleaseKey(release)] || this.defaultHash;
    },
    getReleaseKey: function(release){
        if (release){
            var startDate = Rally.util.DateTime.fromIsoString(release.get('ReleaseStartDate')),
                endDate = Rally.util.DateTime.fromIsoString(release.get('ReleaseDate'));

            var utcStartDate = Rally.util.DateTime.shiftTimezoneOffDate(startDate),
                utcEndDate = Rally.util.DateTime.shiftTimezoneOffDate(endDate);

            var key =  Rally.util.DateTime.toIsoString(utcStartDate) + Rally.util.DateTime.toIsoString(utcEndDate) + release.get('Name');
            return key.substring(0,254);
        } else {
            return "Unscheduled";
        }

    },
    load: function(appId, portfolioItemType, targetValues){
        var deferred = Ext.create('Deft.Deferred');
        this.allocationsByRelease = {};
        this.defaultHash = this._buildDefaultHash(targetValues);

        Rally.data.PreferenceManager.load({
            appID: appId,
            project: this.project,
            filterByName: portfolioItemType,
            scope: this,
            success: function(prefs) {
                if (prefs[portfolioItemType]){
                    this.allocationsByRelease = Ext.JSON.decode(prefs[portfolioItemType]);
                    this.logger.log('load preferences project',this.project, this.allocationsByRelease);
                }
                deferred.resolve();
            }
        });
        return deferred;
    },
    update: function(appId, portfolioItemType, release, targetHash){

        this.allocationsByRelease[this.getReleaseKey(release)] = targetHash;

        var prefs = {};
        prefs[portfolioItemType] = Ext.JSON.encode(this.allocationsByRelease);

        Rally.data.PreferenceManager.update({
            appID: appId,
            settings: prefs,
            project: this.project,
            scope: this,
            success: function(updatedRecords, notUpdatedRecords) {
                this.logger.log('_setTargetAllocationHash save preferences',updatedRecords, notUpdatedRecords,
                    'appId',appId,'project',this.project, 'settings',prefs,'release',this.getReleaseKey(release));
            }
        });
    },
    _cleanseHash: function(hash){
        var cleansedHash = {},
            noneText = this.noneText;

        _.each(values, function(v){
            if (v && v.length > 0) {
                cleansedHash[v] = 0;
            }
        });
        cleansedHash[noneText] = 0;

        _.each(hash, function(value, key){
            if (Ext.Array.contains(values, key)){
                cleansedHash[key] = value;
            } else {
                cleansedHash[noneText] = (cleansedHash[noneText] || 0) + value;
            }
        });
        return cleansedHash;
    },
    _buildDefaultHash: function(targetValues){
        var targetAllocationHash = {},
            numValidTargetValues = _.without(targetValues,"").length,
            defaultTargetAllocation = numValidTargetValues > 0 ? 100 / numValidTargetValues : 100;

        Ext.each(targetValues, function(f){
            if (f && f.length > 0){
                targetAllocationHash[f] = defaultTargetAllocation;
            }
        });
        return targetAllocationHash;
    }
});

/**
 * Created by kcorkan on 5/22/15.
 */
Ext.define('Rally.app.AppSettings', {
    extend: 'Ext.Container',
    alias: 'widget.rallyappsettings',
    requires: [
        'Rally.ui.Button',
        'Rally.data.wsapi.Filter',
        'Rally.util.Ref',
        'Rally.data.PreferenceManager',
        'Rally.util.DeepCopy',
        'Rally.app.SettingsFactory',
        'Rally.app.settings.Loader',
        'Rally.util.Help',
        'Rally.util.Test',
        'Rally.ui.CheckboxField',
        'Rally.ui.plugin.HelpField',
        'Rally.ui.dialog.ConfirmDialog'
    ],

    inheritableStatics: {
        /**
         * @private
         * @property GLOBAL_SETTINGS
         * These settings are always saved globally (app scoped)
         */
        GLOBAL_SETTINGS: ['title', 'project', 'projectScopeUp', 'projectScopeDown', 'autoResize']
    },

    componentCls: 'app-settings',

    config: {
        /**
         * @cfg {Rally.app.Context} context The runtime context.  This is automatically provided
         * to the app settings at the time of construction by its container.
         */
        context: undefined,

        /**
         * @cfg {Object[]} fields Config for fields to draw on the settings panel.
         * @cfg {String} fields.type The type of field to draw, must be a valid type defined in Rally.app.SettingsFactory.
         * @cfg {String} fields.name The name to give the setting, will be available to the app as myApp.getSetting(name)
         * @cfg {String} fields.label The label of the field. Defaults to the given type (capitalized) if not provided.
         * @cfg {String} field.initialValue A value to give the field if it hasn't been set yet
         */
        fields: [],

        /**
         * @cfg {Object[]} fields Config for user fields to draw on the settings panel.
         * @cfg {String} fields.type The type of field to draw, must be a valid type defined in Rally.app.SettingsFactory.
         * @cfg {String} fields.name The name to give the setting, will be available to the app as myApp.getSetting(name)
         * @cfg {String} fields.label The label of the field. Defaults to the given type (capitalized) if not provided.
         * @cfg {String} field.initialValue A value to give the field if it hasn't been set yet
         */
        userFields: [],

        /**
         * @cfg {Object} settings The current values to be applied to the fields rendered in this component
         */
        settings: {},

        /**
         * @cfg {Object} settings The default values to be applied to the fields rendered in this component
         */
        defaultSettings: {},

        /**
         * @cfg {Boolean} isEditable whether or not changes may be made.  If false the component will be rendered masked.
         */
        isEditable: true,

        /**
         * @cfg {String} settingsScope the scope with which settings will be persisted.
         * May be one of "app", "workspace", "project"
         */
        settingsScope: 'app',

        /**
         * @cfg {Boolean} shouldInjectTitleField Whether to inject a title field.
         * set to true if you want AppSettings to automatically inject title if not present
         */
        shouldInjectTitleField: false
    },

    _currentScope: null,

    constructor: function(config) {
        Ext.applyIf(config.settings, config.defaultSettings);
        this.initialSettings = Ext.clone(config.settings);

        this.callParent(arguments);
    },

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event
             * Fired when the settings have been saved and the app view should show again.
             * @param {Object} settings the settings that were saved
             */
            'save',

            /**
             * @event
             * Fired when the cancel button has been clicked and the app view should show again.
             */
            'cancel',

            /**
             * @event
             * Fired when all of the appsettings components have fired their ready event.
             */
            'appsettingsready'
        );

        this.isReady = {};

        this._loadPreferenceModel();
    },

    /**
     * @param settingsFields {Object[]} Field configs to add.
     */
    addSettingsFields: function(fields) {
        this.addFieldsToCmp(this.down('#scopedSettingsForm'), fields);
    },

    /**
     * @param cmp {Ext.Container} Container to add fields to.
     * @param fields {Object[]} Field configs to add.
     */
    addFieldsToCmp: function(cmp, fields) {
        var drawFieldForCmp = _.curry(this._drawField)(cmp);
        _.each(fields, drawFieldForCmp, this);
    },

    _loadPreferenceModel: function() {
        console.log('_loadPreferenceModel');
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {
                this._preferenceModel = model;
                this._loadPreferences({
                    callback: this._preferencesRetrieved,
                    scope: this
                });
            },
            scope: this});
    },

    _drawForms: function() {
        var disableAppScopedSettings = false,
            disableScopedSettings = false,
            permissions =  this.context.getPermissions(),
            isCurrentProjectAdmin = permissions && permissions.isProjectAdmin(this._getCurrentContext().getProject()),
            hasAppScopedSettings = this._getAppScopedSettingsFields().length,
            hasWorkspaceOrProjectSettings = (this.settingsScope !== 'app' && this._getScopedSettingsFields().length),
            hasNonUserScopedSettings = hasAppScopedSettings || hasWorkspaceOrProjectSettings;

        if (!this.isEditable && this.settingsScope === 'project' && isCurrentProjectAdmin) {
            this.isEditable = true;
            disableAppScopedSettings = true;
        }

        // eventually will get rid of this hack with some new design work...using this so we can mask only
        // these sections when a user does not have permission to edit these sections
        if (hasNonUserScopedSettings) {
            this.add({
                xtype: 'container',
                itemId: 'nonUserScopedSettingsContainer'
            });
        }

        if (hasAppScopedSettings) {
            this._drawAppSettingsForm(disableAppScopedSettings);
        }

        if (hasWorkspaceOrProjectSettings) {
            this._drawWorkspaceOrProjectSettingsForm(disableScopedSettings);
        }

        if (this.getUserFields() && this.getUserFields().length) {
            this._drawUserSettingsForm();
        }
    },

    _getDefaultFormConfig: function() {
        return {
            xtype: 'form',
            cls: 'settings-form',
            border: false,
            manageHeight: false
        };
    },

    _drawAppSettingsForm: function(disableAppScopedSettings) {
        this.down('#nonUserScopedSettingsContainer').add([
            {
                xtype: 'component',
                itemId: 'settingsTitle',
                disabled: disableAppScopedSettings,
                html: (this.settingsScope !== 'app') && this._getScopedSettingsFields().length ? 'Global Settings' : 'Settings',
                cls: 'settings-title'
            },
            Ext.apply({
                itemId: 'settingsForm',
                disabled: disableAppScopedSettings,
                listeners: {
                    initialload: this._projectScopeAvailable,
                    scopechanged: this._raiseProjectScopeChanged,
                    scope: this
                }
            }, this._getDefaultFormConfig())
        ]);
    },

    _drawWorkspaceOrProjectSettingsForm: function(disableScopedSettings) {
        this.down('#nonUserScopedSettingsContainer').add([
            {
                xtype: 'component',
                itemId: 'scopedSettingsTitle',
                disabled: disableScopedSettings,
                html: ((this.settingsScope === 'project' && this._getCurrentContext().getProject().Name) ||
                (this.settingsScope === 'workspace' && this._getCurrentContext().getWorkspace().Name)) + ' Settings',
                cls: 'settings-title scoped'
            },
            Ext.apply({
                itemId: 'scopedSettingsForm',
                disabled: disableScopedSettings
            }, this._getDefaultFormConfig())
        ]);
    },

    _drawUserSettingsForm: function() {
        this.add([
            {
                xtype: 'component',
                html: 'My Settings',
                itemId: 'userSettingsTitle',
                cls: 'settings-title user-scoped'
            },
            Ext.apply({
                itemId: 'userScopedSettingsForm'
            }, this._getDefaultFormConfig())
        ]);
    },

    _hasProjectPicker: function() {
        return _.some(this.getFields(), {type: 'project'});
    },

    _projectScopeAvailable: function(picker, scopeRecord) {
        if (this.settingsScope !== 'app') {
            this._currentScope = scopeRecord;
            this._drawScopedSettings();
        }
    },

    _loadPreferences: function(options) {
        console.log('_loadPreferences');
        if (this.getContext() && this.getContext().get('appID')) {
            Rally.app.settings.Loader.load({
                callback: options.callback,
                context: this._getCurrentContext(),
                scope: options.scope,
                settingsScope: this.settingsScope
            });
        } else {
            Ext.callback(options.callback, options.scope, [{}]);
        }
    },

    _preferencesRetrieved: function(settings) {
        console.log('_preferencesRetrieved');
        this.isReady.canInvoke = true;

        this.setSettings(Ext.apply({}, settings, this.settings));
        this._injectTitleField();
        this._drawForms();

        this._drawAppScopedSettings();
        if (this.settingsScope !== 'app' && !this._hasProjectPicker()) {
            this._drawScopedSettings();
        }
        this._drawUserScopedSettings();
        this._fireReady();

        this._onAppSettingsReady();
    },

    _raiseProjectScopeChanged: function(project, scopeRecord) {
        this._currentScope = scopeRecord;

        if (this.settingsScope === 'project') {
            this.setLoading(true);

            this.down('#scopedSettingsForm').items.each(this._removeFieldEventHandlers, this);
            this.down('#scopedSettingsForm').removeAll(true);

            this._loadPreferences({
                callback: this._redrawProjectSettings,
                scope: this
            });
        } else {
            this.fireEvent('projectscopechanged', this._getCurrentContext());
        }
    },

    _removeFieldEventHandlers: function(field) {
        Ext.Object.each(field.handlesEvents, function(event, handler) {
            this.un(event, handler, field);
        }, this);
    },

    _redrawProjectSettings: function(settings) {
        this.setSettings(Ext.apply({}, settings, this.defaultSettings));
        this._drawScopedSettings();
        this.setLoading(false);
    },

    _injectTitleField: function() {
        if (this.getShouldInjectTitleField() && !_.some(this.getFields(), {name: 'title'})) {
            this.getFields().unshift({
                type: 'text',
                name: 'title',
                label: 'Title'
            });
        }
    },

    _getAppScopedSettingsFields: function() {
        var appScopedSettingsFields = _.filter(this.getFields(), function(fieldConfig) {
            return this._isGlobalSettingsField(fieldConfig) || this.settingsScope === 'app';
        }, this);

        if (this.isEditable && this.settingsScope === 'project' && this.getContext().getPermissions().isWorkspaceOrSubscriptionAdmin()) {
            appScopedSettingsFields.push({
                xtype: 'rallycheckboxfield',
                plugins: [
                    {
                        ptype: 'rallyhelpfield',
                        helpId: 276,
                        helpText: 'more info'
                    }
                ],
                boxLabel: 'Check this box to update the default settings for this app across the Workspace. If this box is not checked, settings will be applied for the current Project only.',
                boxLabelCls: 'default-settings-box-label',
                cls: 'default-settings-checkbox',
                itemId: 'defaultSettingsCheckbox',
                label: 'Default Settings',
                submitValue: false
            });
        }

        return appScopedSettingsFields;
    },

    _getScopedSettingsFields: function() {
        return _.filter(this.getFields(), function(fieldConfig) {
            return this.settingsScope !== 'app' && !this._isGlobalSettingsField(fieldConfig);
        }, this);
    },

    _drawAppScopedSettings: function() {
        this.addFieldsToCmp(this.getAppScopedSettingsForm(), this._getAppScopedSettingsFields());
    },

    _drawScopedSettings: function() {
        var scopedSettingsFields = this._getScopedSettingsFields();
        if (scopedSettingsFields.length) {
            var scopeName = this.settingsScope === 'project' ? this._getCurrentContext().getProject().Name : this._getCurrentContext().getWorkspace().Name;
            this.down('#scopedSettingsTitle').update(scopeName + ' Settings');
            this.addSettingsFields(scopedSettingsFields);
        }
    },

    _drawUserScopedSettings: function() {
        if (this.getUserFields() && this.getUserFields().length) {
            this.addFieldsToCmp(this.down('#userScopedSettingsForm'), this.getUserFields());
        }
    },

    _isGlobalSettingsField: function(fieldConfig) {
        return _.contains(this.self.GLOBAL_SETTINGS, fieldConfig.name) ||
            _.contains(this.self.GLOBAL_SETTINGS, fieldConfig.type);
    },

    _drawField: function(form, fieldConfig) {
        var field = this._createFieldFromConfig(fieldConfig);
        this._applyScopeToField(field);
        this._addFieldToForm(form, field, fieldConfig);
    },

    _getValueForField: function(field, fieldName, settings) {
        var value;
        if (field.mapsToMultiplePreferenceKeys) {
            value = {};
            Ext.each(field.mapsToMultiplePreferenceKeys, function(name) {
                value[name] = settings[name];
            });
        } else {
            value = settings[fieldName];
        }
        return value;
    },

    _createFieldFromConfig: function(fieldConfig) {
        if (fieldConfig.storeConfig && fieldConfig.storeConfig.autoLoad) {
            throw "Field Config for App Settings components should not auto load the store. Store will be loaded from the App Settings panel after init.";
        }

        var field = Ext.apply({}, Rally.app.SettingsFactory.getEditorConfig(fieldConfig.type) || fieldConfig);
        var fieldName = fieldConfig.name || fieldConfig.type;
        var fieldValue = this._getValueForField(field, fieldName, this.settings) || fieldConfig.initialValue;

        Ext.apply(field, fieldConfig.config);
        Ext.applyIf(field, {
            fieldLabel: fieldConfig.label || (fieldConfig.name && Ext.util.Format.capitalize(fieldConfig.name)) || (fieldConfig.type && Ext.util.Format.capitalize(fieldConfig.type)),
            name: fieldName,
            labelWidth: 75,
            labelSeparator: '',
            value: fieldValue
        });

        return field;
    },

    _addFieldToForm: function(form, field, fieldConfig) {
        var fieldCmp = form.add(field);
        fieldCmp.addCls(Rally.util.Test.toBrowserTestCssClass('settings-' + fieldConfig.type));
        this._handleReady(fieldCmp);
        this._connectFieldEventHandlers(fieldCmp);

        if (fieldCmp.getStore && fieldCmp.getStore()) {
            fieldCmp.getStore().load();
        }

        return fieldCmp;
    },

    _handleReady: function(field) {
        if (field.readyEvent) {
            this.isReady[field.getId()] = false;
            field.on(field.readyEvent, function() {
                this._markReady(field.getId());
            }, this);
        }
    },

    _markReady: function(id) {
        this.isReady[id] = true;
        this._fireReady();
    },

    _fireReady: function() {
        var fireReady = true;
        Ext.Object.each(this.isReady, function(fieldId) {
            fireReady = fireReady && this.isReady[fieldId];
        }, this);

        if (fireReady) {
            this._onAppSettingsReady();
        }
    },

    afterRender: function() {
        this.callParent(arguments);
        this._fireReady();
    },

    _onAppSettingsReady: function () {
        console.log('_onAppSettingsReady', this.rendered, this.isEditable, this.getUserFields(), this.isReady, this.isReady.canInvoke);
        if (this.rendered && this.isReady.canInvoke) {
            if (this.isEditable || !Ext.isEmpty(this.getUserFields())) {
                this._drawSaveAndCancelButtons();
            }
            if (!this.isEditable) {
                this._maskSettings();
            }
            this.fireEvent('appsettingsready', this);
            this.isReady.canInvoke = false;
        }
    },

    _connectFieldEventHandlers: function(field) {
        if (field.handlesEvents) {
            Ext.Object.each(field.handlesEvents, function(event, handler) {
                this.on(event, handler, field);
            }, this);
        }
    },

    _applyScopeToField: function(field) {
        field.context = this._getCurrentContext();

        if (field.storeConfig) {
            if (field.storeConfig.context) {
                Ext.applyIf(field.storeConfig.context, {
                    project: this._getCurrentProjectScope()
                });
            } else {
                Ext.applyIf(field.storeConfig, {
                    context: {
                        project: this._getCurrentProjectScope()
                    }
                });
            }
        }
    },

    _getCurrentContext: function() {
        var currentContext = null;

        if (Ext.isFunction(this.getContext().clone)) {
            currentContext = this.getContext().clone();
        } else {
            currentContext = Ext.clone(this.getContext());
        }

        if (this._currentScope !== null) {
            if (this._currentScope) {
                currentContext.put('project', this._currentScope.raw);
                currentContext.put('workspace', this._currentScope.raw.Workspace);
            } else {
                currentContext.put('project', Rally.environment.getContext().getProject());
                currentContext.put('workspace', Rally.environment.getContext().getWorkspace());
            }
        }
        return currentContext;
    },

    _getCurrentProjectScope: function() {
        return Rally.util.Ref.getRelativeUri(this._getCurrentContext().getProject());
    },

    _getCurrentWorkspaceScope: function() {
        return Rally.util.Ref.getRelativeUri(this._getCurrentContext().getWorkspace());
    },

    _onSaveSuccess: function(records) {
        this.fireEvent('save', this.settings, records);
    },

    save: function() {
        if (!_.every(this.query('form'), function(form) {
                return form.getForm().isValid();
            })) {
            return;
        }

        if(this._shouldApplyDefaults()){
            Ext.create('Rally.ui.dialog.ConfirmDialog', {
                confirmLabel: 'OK',
                listeners: {
                    confirm: this._saveScopedSettings,
                    scope: this
                },
                message: 'You are about to apply settings at the Workspace level. ' +
                'These settings will become the default for this app. ' +
                'Existing Project-level settings will be preserved. ' +
                Rally.util.Help.getLinkTag({id: 276, text: 'more info'})
            });
        }else{
            this._saveScopedSettings();
        }
    },

    _saveScopedSettings: function() {
        var saveSettingsPromises = [],
            appScopedSettingsForm = this.getAppScopedSettingsForm();

        if (appScopedSettingsForm && !appScopedSettingsForm.isDisabled() && Ext.Object.getSize(appScopedSettingsForm.getValues())) {
            saveSettingsPromises.push(this._saveAppGlobalScopedSettings());
        }

        if (!Ext.isEmpty(this._getScopedSettingsFields())) {
            saveSettingsPromises.push(this._saveAppProjectScopedSettings());
        }

        if (!Ext.isEmpty(this.getUserFields())) {
            saveSettingsPromises.push(this._saveUserScopedSettings());
        }

        return Deft.Promise.all(saveSettingsPromises).then({
            success: function(recordSets) {
                var records = _.uniq(_.reduce(recordSets, function(result, recordSet) {
                    return result.concat(recordSet);
                }, []));

                this._onSaveSuccess(records);
                return records;
            },
            scope: this
        });
    },

    _saveSettings: function(options) {
        return this.getContext() && this.getContext().get('appID') ?
            Rally.data.PreferenceManager.update(options) :
            Deft.Promise.when([]);
    },

    _saveAppGlobalScopedSettings: function() {
        var globalAppSettings = this.getAppScopedSettingsForm().getValues();
        Ext.apply(this.settings, globalAppSettings);

        return this._saveSettings({
            appID: this.getContext() && this.getContext().get('appID'),
            settings: globalAppSettings,
            project: null,
            workspace: null,
            scope: this
        });
    },

    _saveAppProjectScopedSettings: function() {
        var scopedSettings = this.down('#scopedSettingsForm').getValues();
        Ext.apply(this.settings, scopedSettings);

        var updateOptions = {
            appID: this.getContext() && this.getContext().get('appID'),
            settings: scopedSettings,
            scope: this
        };

        if (this.settingsScope === 'workspace' || this._shouldApplyDefaults()) {
            updateOptions.workspace = this._getCurrentWorkspaceScope();
        } else if (this.settingsScope === 'project') {
            updateOptions.project = this._getCurrentProjectScope();
        }

        return this._saveSettings(updateOptions);
    },

    _saveUserScopedSettings: function() {
        var userSettings = this.getUserScopedSettingsForm().getValues();
        Ext.apply(this.settings, userSettings);

        return this._saveSettings({
            appID: this.getContext() && this.getContext().get('appID'),
            settings: userSettings,
            filterByUser: true,
            project: null,
            workspace: this._getCurrentWorkspaceScope(),
            scope: this
        });
    },

    getAppScopedSettingsForm: function(){
        return this.down('#settingsForm');
    },

    getUserScopedSettingsForm: function(){
        return this.down('#userScopedSettingsForm');
    },

    getApplyDefaultsCheckbox: function(){
        return this.down('#defaultSettingsCheckbox');
    },

    _shouldApplyDefaults: function(){
        return this.getApplyDefaultsCheckbox() && this.getApplyDefaultsCheckbox().getValue();
    },

    hasChanges: function() {
        if (!this.isEditable) {
            return false;
        }
        return _.some(this.query('form'), this._formHasChanges, this);
    },

    _formHasChanges: function(form) {
        var hasChanges = false;

        Ext.Object.each(form.getValues(), function(name, value) {
            var setting = new this._preferenceModel({Value: value});
            if (this.initialSettings[name] !== setting.get('Value')) {
                hasChanges = true;
                return false;
            }
        }, this);
        return hasChanges;
    },

    _drawSaveAndCancelButtons: function() {
        this.add({
            xtype: 'container',
            padding: '6 0 0 0',
            height: 35,
            layout: {
                type: 'vbox',
                align: 'center'
            },
            items: {
                xtype: 'container',
                cls: 'center',
                items: [
                    {
                        xtype: 'rallybutton',
                        text: 'Save',
                        cls: 'save-button primary rly-small',
                        listeners: {
                            click: this.save,
                            scope: this
                        }
                    },
                    {
                        xtype: 'rallybutton',
                        text: 'Cancel',
                        cls: 'secondary rly-small',
                        ui: 'link',
                        listeners: {
                            click: function() {
                                this.fireEvent('cancel');
                            },
                            scope: this
                        }
                    }
                ]
            }
        });
    },

    _getAllFormItems: function() {
        function getItems(cmp) {
            return cmp.items && cmp.items.items ?
                cmp.items.items : cmp.items;
        }

        var settingsForm = this.down('#settingsForm'),
            scopedSettingsForm = this.down('#scopedSettingsForm'),
            items = [];

        if (settingsForm) {
            items = items.concat(getItems(settingsForm));
        }

        if (scopedSettingsForm) {
            items = items.concat(getItems(scopedSettingsForm));
        }

        return items;
    },

    _maskSettings: function() {
        var maskContainer = this.down('#nonUserScopedSettingsContainer');
        if (maskContainer) {
            var mask = maskContainer.setLoading({useMsg: false}),
                items = this._getAllFormItems();

            if (items.length) {
                this._sendPickersBehindCmp(mask, items);
            }
        }
    },

    /**
     * @private
     *  Sends all pickers in items behind cmp
     *  Useful for sending the pickers behind a mask
     *
     *  @param cmp {Ext.Component} Component to send the pickers behind
     *  @param items {Ext.Component[]} Child components to look through for pickers
     */
    _sendPickersBehindCmp: function(cmp, items) {
        var pickerRE = /picker$/,
            pickerFields = _.filter(items, function(field) {
                return pickerRE.test(field.xtype);
            });

        _.each(pickerFields, function(pickerField) {
            cmp.zIndexManager.sendToBack(pickerField.getPicker());
        });
    }
});
Ext.define('Rally.technicalservices.PortfolioAlignmentSettings',{

    chartColors: [ '#2f7ed8', '#8bbc21', '#910000',
        '#492970', '#f28f43', '#145499','#77a1e5', '#c42525', '#a6c96a',
        '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9','#aa1925',
        '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
        '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
        '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],
    noneText: 'None',
    noneColor: '#C0C0C0',
    otherText: 'Other',
    otherColor: '#363636',

    persistAllocationsByProject: true,
    categoryField: 'InvestmentCategory',

    chartType: {
        targeted: {
            title: 'Investment Planning Targets for {0}',
            field: '',
            display: true,
            toolTip: 'Desired investment allocation for {0} in the selected release.  <br/><br/>Click <b><i>Configure Targets...</i></b> to change the target allocations. Target Allocations will be saved to preferences for the selected Release and {1}.  Allocations must add up to 100%.'
        },
        planned: {
            title: 'Preliminary Feature Estimates',
            field: 'PreliminaryEstimate',
            display: true,
            dataFieldAttribute: 'Value',
            toolTip: "Allocation of numeric Preliminary Estimate field values for all {0}s in the selected Release for the current project scope."
        },
        scheduled: {
            title: 'Estimated User Story Points',
            field: 'LeafStoryPlanEstimateTotal',
            display: true,
            toolTip: "Sum of the plan estimates for all user story descendants of all {0}s in the selected release for the current project scope.<br/><br/>The portfolio items are for the current scope, the user stories included in the sum are independent of scope or associated release becuase they are retrieved from the LeafStoryPlanEstimateTotal field."
        },
        actual: {
            title: 'Accepted User Story Points',
            field: 'AcceptedLeafStoryPlanEstimateTotal',
            display: true,
            toolTip: "Sum of the plan estimates for all currently accepted user story descendants of all {0}s in the selected release for the current project scope.<br/><br/>  The portfolio items are for the current scope, the user stories included in the sum are independent of scope or associated release becuase they are retrieved from the AcceptedLeafStoryPlanEstimateTotal field."
        }
    },

    legendColors: {},

    showDataLabels: true,
    dataLabelDistance: 1,
    dataLabelColor: 'black',
    constructor: function(config){
        Ext.apply(this,config);
    },
    _getScopeText: function(){
        if (this.persistAllocationsByProject === true){
            return 'Project';
        }
        return 'Workspace';
    },
    setLegendColors: function(legendColorHash){
        legendColorHash[this.noneText] = this.noneColor;
      //  legendColorHash[this.otherText] = this.otherColor;
        this.legendColors = legendColorHash;
    },
    getLegendColor: function(category){
        return this.legendColors[category] || this.otherColor;
    },
    getSeriesName: function(chartType){
        var seriesName = chartType;
        if (this.chartType[chartType]){
            seriesName = this.chartType[chartType].title || chartType;
        }
        return seriesName;
    },
    getChartTypeDataField: function(chartType){
        if (this.chartType[chartType]){
            return this.chartType[chartType].field || null;
        }
        return null;
    },
    getChartTypeDataFieldAttribute: function(chartType){
        if (this.chartType[chartType]){
            return this.chartType[chartType].dataFieldAttribute || null;
        }
        return null;
    },
    getChartTitle: function(chartType){
        if (this.chartType[chartType]){
            if (chartType == 'targeted'){
                return Ext.String.format(this.chartType[chartType].title || chartType, this._getScopeText());
            }
            return this.chartType[chartType].title || chartType;
        }
        return chartType;
    },
    getToolTip: function(chartType, portfolioItemType){
        var toolTip = Ext.String.format(this.chartType[chartType].toolTip || Ext.String.format("No tool tip found.",chartType), portfolioItemType, this._getScopeText());
        if (chartType == 'targeted'){
        }
        return Ext.String.format("<b>{0}</b>:  {1}",
            this.getChartTitle(chartType), toolTip);
    },
    getNoDataMessage: function(chartType){
        return '<span class="tscenter">No data to display</span>';
    }
});
Ext.define('Rally.technicalservices.dialog.TargetAllocation', {
    extend: 'Rally.ui.dialog.Dialog',
    autoShow: true,
    draggable: true,
    modal: true,
    width: 350,
    title: 'Target Allocations',
    items: {
        xtype: 'container',
        itemId: 'dialog-body',
        padding: 10
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '10',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    cls: 'primary',
                    itemId: 'saveButton',
                    text: 'Save',
                    disabled: true
                },
                {
                    xtype: 'rallybutton',
                    cls: 'cancel secondary',
                    text: 'Cancel',
                    itemId: 'cancelButton'
                }
            ]
        }
    ],
    initComponent: function(){
        this.callParent(arguments);

        this.addEvents('allocationsupdate');

        _.each(this.targetAllocation, function(val,key){
            this.down('#dialog-body').add({
                xtype: 'rallynumberfield',
                fieldLabel: key,
                labelAlign: 'right',
                labelWidth: 150,
                value: val || 0,
                minValue: 0,
                maxValue: 100,
                listeners: {
                    scope: this,
                    change: this._validate
                }
            });
        }, this);

        this._validate();
        this.down('#saveButton').on('click', this._onSave, this);
        this.down('#cancelButton').on('click', this._onCancel, this);
    },
    _getUpdatedAllocations: function(){
        var allocations = {};
        var cmps = this.down('#dialog-body').query('rallynumberfield');
        _.each(cmps, function(cmp){
            allocations[cmp.fieldLabel] = cmp.getValue();
        });
        return allocations;
    },
    _validate: function(){

        var cmps = this.down('#dialog-body').query('rallynumberfield');
        var val = 0;
        _.each(cmps, function(cmp){
            val += cmp.getValue();
        });
        var valid = (val === 100);

        this.down('#saveButton').setDisabled(!valid);
        return valid;
    },
    _onSave: function(){
        var targetAllocationHash = this._getUpdatedAllocations();
        this.fireEvent('allocationsupdate', targetAllocationHash);
        this.destroy();
    },
    _onCancel: function(){
        this.destroy();
    }
});

Ext.define("PortfolioAlignment", {
    extend: 'Rally.app.TimeboxScopedApp',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype: 'container', itemId: 'settings_box'},
        {xtype: 'container', itemId: 'ct-header',cls: 'header', layout: {type: 'hbox'}},
        {xtype: 'container',itemId:'ct-display', layout:{type: 'hbox'}},
        {xtype: 'container',
            itemId:'ct-legend',
            layout: {type: 'hbox', pack: 'center'} ,
            padding: 10
        },
        {
            xtype: 'tsinfolink',
            height: 20,
            renderData: {date: Rally.util.DateTime.formatWithDefaultDateTime(new Date())}
        }],
    /**
     * TimeboxScopedApp settings
     */
    scopeType: 'release',
    comboboxConfig: {
        fieldLabel: 'Release',
        labelAlign: 'right',
        width: 300,
        margin: 10
    },
    cursor: 'pointer',
    /**
     * PortfolioAlignment app settings
     */
    portfolioItemFetchFields: ['Name','ObjectID','FormattedID','AcceptedLeafStoryPlanEstimateTotal','LeafStoryPlanEstimateTotal','PreliminaryEstimate','Value'],
    config: {
        defaultSettings: {
            persistAllocationsForProject:  false
        }
    },
    chartSettings: null,

    onNoAvailableTimeboxes: function(){
        this.logger.log('No available releases');
    },
    onScopeChange: function(scope){
        this.logger.log('scope changed',scope);
        this._updateApp();
    },
    _addComponents: function(){
        if (this.getHeader()) {
           // this.getHeader().layout = {type:'hbox'};
        } else {
            this.add({xtype: 'container',itemId:'ct-header', cls: 'header', layout: {type: 'hbox'}});
            this.add({xtype: 'container',itemId:'ct-display', layout:{type: 'hbox'}});
            this.add({xtype: 'container',itemId:'ct-legend', flex: 1, layout:{type: 'hbox', pack: 'center'}});
            this.add({xtype: 'tsinfolink', renderData: {date: Rally.util.DateTime.formatWithDefaultDateTime(new Date())}});
        }
        this.cbPortfolioItemType = this.getHeader().add({
            xtype: 'rallyportfolioitemtypecombobox',
            itemId: 'type-combo',
            fieldLabel: 'Portfolio Item Type',
            labelWidth: 100,
            labelAlign: 'right',
            margin: 10,
            storeConfig: {
                sorters: [{
                    property: 'Ordinal',
                    direction: 'ASC'
                }],
                filters: [{
                    property: 'Ordinal',
                    value: 0
                }]
            },
            listeners: {
                scope: this,
                ready: function(cb) {
                    var rec = cb.getStore().getAt(0);
                    cb.setValue(rec.get(cb.valueField));
                    //cb.setDisabled(true);  //Temporary until we figure out how to handle parent portfolio item type
                },
                change: this._updatePortfolioItemConfig
            },
            hidden: true //until we decide to deal with the upper level portfolio items.
        });

        this.getHeader().add({
            xtype: 'rallybutton',
            text: 'Configure Targets...',
            scope: this,
            handler: this._buildTargetDialog,
            margin: 10
        });

    },
    initComponent: function() {
        this.callParent([]);
     },
    launch: function(){
        this.callParent();
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());  //(this.config.type,this.config.pageSize,this.config.fetch,this.config.columns);
        }
   },
    getHeader: function() {
        return this.down('container[cls=header]');
    },
    _updatePortfolioItemConfig: function(cb){
        this.logger.log('_updatePortfolioItemConfig')
        var workspaceRef = this.getContext().getWorkspace()._ref;
        var targetField = this.chartSettings.categoryField;
        this.portfolioItemType = cb.getRecord().get('TypePath');
        this.portfolioItemDisplayName = cb.getRecord().get(cb.displayField);
        //Temporary
        if (cb.getRecord().get('Ordinal') > 0){
            return;  //Don't process becuase we can't handle this yet
        }

        this.logger.log('_loadCategories', this.portfolioItemType, targetField);

        Rally.data.wsapi.ModelFactory.getModel({
            type: this.portfolioItemType,
            context: {
                workspace: workspaceRef
            },
            scope: this,
            success: function(model) {
                var field = model.getField(targetField);
                field.getAllowedValueStore().load({
                    fetch: ['StringValue'],
                    callback: function(allowedValues, operation, success){
                        if (success){
                            var values = _.map(allowedValues, function(av){return av.get('StringValue')});
                            var i = 0;
                            this.logger.log('AllowedValues ', values);
                            var legendColors = {};
                            Ext.each(values, function(v){
                                if (v && v.length > 0) {
                                    legendColors[v] = this.chartSettings.chartColors[i++];
                                }
                                if (i == this.chartSettings.chartColors.length){
                                    i = 0;
                                }
                            }, this);
                            this.chartSettings.setLegendColors(legendColors);
                            this.targetFieldValues = values;

                            var projectRef = this.chartSettings.persistAllocationsByProject ?
                                this.getContext().getProjectRef() : null;

                            this.logger.log('project persistence settings', this.chartSettings.persistAllocationsByProject,
                                projectRef, this.getContext().getProjectRef());

                            this.allocationPreferences = Ext.create('Rally.technicalservices.preferences.Allocation',{
                                noneText: this.noneText,
                                project: projectRef
                            });
                           this.allocationPreferences.load(this.getAppId(),this.portfolioItemType,values).then({
                                scope: this,
                                success: function(){
                                    this._updateApp();
                                }
                            });
                        } else {
                            var msg = 'Error retrieving allowed values for ' + targetField + ': ' + operation.error.errors[0];
                            Rally.ui.notify.Notifier.showError({message: msg});
                        }
                    },
                    scope: this
                });
            }
        });
    },
    _updateChart: function(chartItemId, series, config){
        var queryId = '#' + chartItemId,
            ct = this.down(queryId);

        if (ct){
            this.down(queryId).removeAll();
        } else {
            ct = this.down('#ct-display').add({
                xtype: 'container',
                itemId: chartItemId,
                flex: 1,
                maxHeight: 350
            });
        }

        var chart = ct.add ({
            xtype: 'rallychart',
            loadMask: false,
            chartData: {
                series: series
            },
            chartConfig: config
        });

        ct.setHeight(300);
    },
    _addLegend: function(){

        this.down('#ct-legend').removeAll();

        var color_data = [];
        _.each(this.chartSettings.legendColors, function(color, label){
            color_data.push({color: color, label: label});
        });

        var ct = this.down('#ct-legend').add({
            xtype: 'container',
            //height: 40,
            tpl: '<tpl for="."><div class="tslegend" style="background-color:{color}">&nbsp;&nbsp;</div><div class="tslegendtext">&nbsp;&nbsp;{label}</div><span class="tslegendspacer">&nbsp;</span></tpl>'
        });
        ct.update(color_data);

    },
    _updateTargetChart: function(){
        this._updateChart('ct-target',[this._getTargetChartData()],this._getChartConfig("targeted"));
    },
    _updateApp: function() {
        var piTypeRecord = this.portfolioItemType,
            timebox = null,
            allowedValues = this._getTargetFieldValues();

        if (this.getContext().getTimeboxScope()){
            timebox = this.getContext().getTimeboxScope().getRecord();
        }

        this.logger.log('_updateApp PortfolioItem Type, Timebox, categories', piTypeRecord, timebox, allowedValues);

        if (piTypeRecord && allowedValues) {
            this.down('#ct-display').removeAll();  //cleanup


            this._fetchData(piTypeRecord, timebox).then({
                scope: this,
                success: function(data){
                    this.logger.log('_fetchData', data);

                     if (data && data.length > 0){
                         this._updateTargetChart();

                         this._addLegend();

                         this._updateChart('ct-planned',
                            [this._getChartData(data,"planned")],
                            this._getChartConfig("planned"));

                        this._updateChart('ct-scheduled',
                            [this._getChartData(data,"scheduled")],
                            this._getChartConfig("scheduled"));

                        this._updateChart('ct-actual',
                            [this._getChartData(data,"actual")],
                            this._getChartConfig("actual"));

                     } else {
                         var releaseName = timebox ? timebox.get('Name') : '(No Release)';
                        this.down('#ct-display').add({
                            xtype: 'container',
                            html: Ext.String.format('No {0} data was found for the currently selected project ({1}) in {2}',piTypeRecord, this.getContext().getProject().Name, releaseName),
                            style: {
                                textAlign: 'center',
                                fontSize: '12px'
                            },
                             flex: 1
                        });
                        Rally.ui.notify.Notifier.showWarning({message: 'No ' + piTypeRecord + ' data was found for the currently selected project scope (' + this.getContext().getProject().Name + ') and release.'});
                    }
                },
                failure: function(operation){
                    var msg = 'Error fetching portfolio items:  ' + operation.error.errors[0];
                    Rally.ui.notify.Notifier.showError({message: msg});
                    this.down('#ct-display').add({
                        xtype: 'container',
                        html: msg,
                        style: {
                            textAlign: 'center',
                            fontSize: '12px',
                            color: 'red'
                        },
                        flex: 1
                    });
                }
            });

        }
        return;
    },
     _initCategoryDataHash: function(){
        var category_data = {},
            allowedValues = this._getTargetFieldValues();

        Ext.each(allowedValues, function(a){
            if (a && a.length > 0){
                category_data[a] = 0;
            }
        });
        category_data[this.chartSettings.noneText] = 0;
       // category_data[this.chartSettings.otherText] = 0;
        return category_data;
    },
    _getChartData: function(data, chartType){
        var category_data = this._initCategoryDataHash(),
            allowedValues = this._getTargetFieldValues(),
            targetField = this.chartSettings.categoryField,
            noneText = this.chartSettings.noneText,
            dataField = this.chartSettings.getChartTypeDataField(chartType),
            dataFieldAttribute = this.chartSettings.getChartTypeDataFieldAttribute(chartType);


        this.logger.log('_getChartData',dataField,dataFieldAttribute);
        Ext.each(data, function(rec){
            var categoryVal = rec.get(targetField) || noneText,
                dataVal = rec.get(dataField) || 0;

            if (dataVal && dataFieldAttribute){
                dataVal = dataVal[dataFieldAttribute] || 0;
            }

            if (dataVal > 0){
                if (_.has(category_data, categoryVal)){
                    category_data[categoryVal] += dataVal;
                } else {
                    //category_data[otherText] += dataVal;
                    this.logger.log('Category not valid', categoryVal, dataVal);
                }
            }
        }, this);


        var series_data = _.map(category_data, function(value, category){

                return {name: category, y: value, color: this.chartSettings.getLegendColor(category), visible: (value > 0)};
        },this);

        this.logger.log('_getChartData', this.chartSettings.getSeriesName(chartType), category_data, series_data);
        return {
                type: 'pie',
                name: this.chartSettings.getSeriesName(chartType),
                data:  series_data,
                showInLegend: false
        };

    },
    _fetchData: function(portfolioItemType, release){
        var deferred = Ext.create('Deft.Deferred'),
            fetch = this.portfolioItemFetchFields,
            context = {workspace: this.getContext().getWorkspace()._ref,
                        project: this.getContext().getProjectRef(),
                        projectScopeUp: this.getContext().getProjectScopeUp(),
                        projectScopeDown: this.getContext().getProjectScopeDown()
            };

        var filters = [{property: "Release", value: null}];
        if (release){
            filters = [{
                property: 'Release.Name',
                value: release.get('Name')
            },{
                property: 'Release.ReleaseStartDate',
                value: release.get('ReleaseStartDate')
            },{
                property: 'Release.ReleaseDate',
                value: release.get('ReleaseDate')
            }];
        }

        fetch.push(this.chartSettings.categoryField);
        this.logger.log('_fetchData',fetch, context);
        var store = Ext.create('Rally.data.wsapi.Store',{
            model: portfolioItemType,
            fetch: fetch,
            context: context,
            filters: filters
        });
        store.load({
            callback: function(records, operation, success){
                this.logger.log('Portfolio item data load ',success, records,operation);
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }
            },
            scope: this
        });
        return deferred;
    },
    _getTargetChartData: function(){
        var categories = this._getTargetFieldValues();
        var series_data = [];
        if (!Ext.Array.contains(categories, this.chartSettings.noneText)){
            categories.push(this.chartSettings.noneText);
        }

        var release = this.getContext().getTimeboxScope().getRecord(),
            targetHash = this.allocationPreferences.getAllocationHash(release);
        Ext.each(categories, function(c){
            if (c && c.length > 0){
                var val = targetHash[c] || 0;
                series_data.push({name: c, y: val, color: this.chartSettings.getLegendColor(c)});
            };
        }, this);

        return {
                type: 'pie',
                name: this.chartSettings.getChartTitle("targeted"),
                data: series_data
            };
    },
    _getChartConfig: function(chartType){
            var title = this.chartSettings.getChartTitle(chartType),
                toolTip = this.chartSettings.getToolTip(chartType, this.portfolioItemDisplayName),
                noDataMessage = this.chartSettings.getNoDataMessage(chartType);

        return {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                marginBottom: 0,
                marginTop: 0,
                spacingBottom: 0,
                events: {
                    load: function(){
                        var chart = this;
                        chart.title.on('mouseover', function(e){
                            Ext.create('Rally.ui.tooltip.ToolTip', {
                                target : e.target,
                                html: toolTip,
                                autoShow: true
                            });
                        });

                        var sum_vals = 0;
                        if (chart.series && chart.series[0] && chart.series[0].data){
                            sum_vals = Ext.Array.sum(_.map(chart.series[0].data, function(obj){return obj.y;}));
                        }

                        if (sum_vals <= 0){
                            var x = chart.plotWidth * .33,
                                y = chart.plotHeight * .40;
                            var noDataText = chart.renderer.text(noDataMessage,x,y).add();
                        }
                    }
                }
            },
            title: {
                text: title
            },
            tooltip: {
                pointFormat: '{point.y:.1f} (<b>{point.percentage:.1f}%</b>)'
            },
            plotOptions: {
                pie: {
                    size: '75%',
                    center: ['50%','40%'],
                    allowPointSelect: true,
                        dataLabels: {
                            enabled: this.chartSettings.showDataLabels,
                            distance: this.chartSettings.dataLabelDistance,
                            color: this.chartSettings.dataLabelColor,
                            crop: false,
                            overflow: 'none',
                            formatter: function(){
                                if (this.percentage > 0){
                                    return this.percentage.toFixed(1) + '%';
                                }
                                return null;
                            }
                    },
                    showInLegend: false
                }
            }
        };
    },
    _getTargetFieldValues: function(){
        if (this.targetFieldValues && this.targetFieldValues.length > 0){
            return this.targetFieldValues;
        }
        return null;
    },
    _buildTargetDialog: function(){
        var release = this.getContext().getTimeboxScope().getRecord(),
            appId = this.getAppId();
        this.logger.log('_buildTargetDialog', release);

        Ext.create('Rally.technicalservices.dialog.TargetAllocation', {
            targetAllocation: this.allocationPreferences.getAllocationHash(release),
            listeners: {
                scope: this,
                allocationsupdate: function(updatedHash){
                    this.logger.log('allocations updated', updatedHash);
                    this.allocationPreferences.update(appId,this.portfolioItemType,release,updatedHash);
                    this._updateTargetChart();
                }
            }
         });
    },
    /********************************************
     /* Overrides for App class
     /*
     /********************************************/
    //getSettingsFields:  Override for App
    getSettingsFields: function() {

        return [{
            name: 'persistAllocationsForProject',
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Persist Allocations for Project',
            labelAlign: 'right',
            labelWidth: 200,
            readyEvent: 'afterrender'
        }];
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //showSettings:  Override
    showSettings: function(options) {
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope,
            autoScroll: true,
            fields: this.getSettingsFields()
        }, options));

      //  this._appSettings.addSettingsFields(this.getSettingsFields());

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        if (this.isExternal()){
            if (this.down('#settings_box').getComponent(this._appSettings.id)==undefined){
                this.down('#settings_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved: function(settings){
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    onSettingsUpdate: function (settings){
        this.chartSettings = Ext.create('Rally.technicalservices.PortfolioAlignmentSettings',{
            persistAllocationsByProject: this.getSetting('persistAllocationsForProject')
        });
        this._addComponents();
    }
});

            
               Rally.launchApp('PortfolioAlignment', {
                   name: 'Portfolio Alignment'
               });
        });
    </script>
    
    <style type="text/css">

.app {

}
.tsinfolink {
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-right: 5px;
    cursor: pointer;
    display: inline-block;
}
.tsinfo {
    text-align: center;
    color: white;
    color: #C0C0C0;
    display: inline-block;
}

.tslegend {
    width: 14px;
    height: 14px;
    border-radius: 3px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.tslegendtext {
    font-family: 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif;
    font-size: '14px'!important;
    color: #274b6d;
    display: inline
}
.tslegendspacer {
    padding: 15px;
    display: inline;
}
.tscenter {
    width: 100%;
    text-align: center;
}
    </style>

</head>
<body></body>
</html>